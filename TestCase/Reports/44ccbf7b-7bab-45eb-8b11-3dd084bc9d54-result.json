{"name": "test_parent", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "@pytest.mark.kk\n    def test_parent():\n            driver = accessmethod1.launchLIMS(\"launch browser\", \"browser link\", \"credentials locator\", \"credentials Values\")\n    \n            # Add\n    \n            beforeCount = accessmethod2.auditTrailCount(driver, \"audittrail\")\n    \n            time.sleep(2)\n            accessmethod3.containerType_Prequesite(driver, \"basic\", \"module screen\")\n    \n            time.sleep(2)\n            accessmethod3.containerType_Add(driver, \"screen locator\", \"screen value\")\n    \n            time.sleep(2)\n            afterCount = accessmethod2.auditTrailCount(driver, \"audittrail\")\n    \n            time.sleep(3)\n            auditTrail(driver, afterCount, beforeCount, \"ADD CONTAINER TYPE\", \"Carl Dolman\", \"Admin\",\n                       \"Container Type: Soap Container;Description: container with 2 compartments;\", \"SYSTEM\")\n    \n            #Edit\n    \n            time.sleep(4)\n    \n            beforeCount = accessmethod2.auditTrailCount(driver, \"audittrail\")\n    \n            time.sleep(2)\n            accessmethod3.containerType_Prequesite(driver, \"basic\", \"module screen\")\n    \n            time.sleep(2)\n            accessmethod3.containerType_Edit(driver, \"screen locator\", \"screen value\", \"tr\")\n    \n            time.sleep(2)\n            afterCount = accessmethod2.auditTrailCount(driver, \"audittrail\")\n    \n            time.sleep(3)\n            auditTrail(driver, afterCount, beforeCount, \"EDIT CONTAINER TYPE\", \"Carl Dolman\", \"Admin\",\n                       \"Container Type: Matrix-> Mat;Description: For use with Tachosil fibrin sealant kits.-> matrix container;\",\n                       \"SYSTEM\")\n    \n            # Delete\n    \n            time.sleep(4)\n    \n            beforeCount = accessmethod2.auditTrailCount(driver, \"audittrail\")\n    \n            time.sleep(2)\n            accessmethod3.containerType_Prequesite(driver, \"basic\", \"module screen\")\n    \n            time.sleep(2)\n            accessmethod3.containerType_Delete(driver, \"screen locator\", \"tr\")\n    \n            time.sleep(2)\n            afterCount = accessmethod2.auditTrailCount(driver, \"audittrail\")\n    \n            time.sleep(3)\n            auditTrail(driver, afterCount, beforeCount, \"DELETE CONTAINER TYPE\", \"Carl Dolman\", \"Admin\",\n                       \"Container Type: abc;\", \"SYSTEM\")\n    \n            accessmethod3.containerType_Prequesite(driver, \"basic\", \"module screen\")\n    \n>           accessmethod3.containerType_search(driver, \"screen locator\", \"filter\")\n\ntest_ContainerTypewithAudit.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTestMethod\\ContainerType.py:195: in containerType_search\n    ReusableMethod.clickXpath(driver, containerType_filtericon_contains)\nUtiliser\\ReusableMethod.py:36: in clickXpath\n    wait = WebDriverWait(driver, 10).until(ec.element_to_be_clickable((By.XPATH, loc2)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"dfe9034e96bf15876535ee37096c17c0\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000002084B710A60>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:89: TimeoutException"}, "attachments": [{"name": "stdout", "source": "d4b8bb57-92ef-4cb0-bb07-cca5db296d08-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "8f2c52be-7f82-4d4b-9347-485aa8fc36d2-attachment.txt", "type": "text/plain"}], "start": 1648118583710, "stop": 1648118811025, "uuid": "f814517d-29ea-4a4f-843d-8c4d11eb10dc", "historyId": "daa50d71a7e9b1f37986c870d955850d", "testCaseId": "61c2cb67d73583f96027877a2a59f103", "fullName": "test_ContainerTypewithAudit#test_parent", "labels": [{"name": "tag", "value": "kk"}, {"name": "suite", "value": "test_ContainerTypewithAudit"}, {"name": "host", "value": "AGD55"}, {"name": "thread", "value": "21444-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_ContainerTypewithAudit"}]}